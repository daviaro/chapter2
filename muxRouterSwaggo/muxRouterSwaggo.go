package main

import (
	"encoding/json"
	"net/http"
	"time"

	_ "swaggo-article-api/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gorilla/mux"
	log "github.com/sirupsen/logrus"
	httpSwagger "github.com/swaggo/http-swagger"
)

// Article represents the model for an article
type Article struct {
	ArticleID       string `json:"articleId" example:"1"`
	ArticleCategory string `json:"Category" example:"histoty"`
}

// GetArticle godoc
// @Summary Get one article
// @Description Get one article
// @Tags article
// @Param category path string true "category of article"
// @Param id path string true "ID of the article"
// @Produce  json
// @Success 200 Article
// @Router /articles/{category}/{id:[0-9]+} [get]
func ArticleHandler(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	log.Info("Pruebas")
	var article Article
	json.NewDecoder(r.Body).Decode(&article)
	article.ArticleID = vars["id"]
	article.ArticleCategory = vars["category"]
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(article)

}

// @title Articles API
// @version 1.0.0
// @description Este es un repositorio de articulos para prueba de Swagger bajo libreria SWAGGO de Go
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email david.aroca@jikkosoft.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host 127.0.0.1:8000
// @BasePath /articles
func main() {
	r := mux.NewRouter()
	r.HandleFunc("/articles/{category}/{id:[0-9]+}", ArticleHandler)
	srv := &http.Server{
		Handler:      r,
		Addr:         "127.0.0.1:8000",
		WriteTimeout: 15 * time.Second,
		ReadTimeout:  15 * time.Second,
	}
	r.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)
	log.Fatal(srv.ListenAndServe())
}
